// DO NOT EDIT MANUALLY - metarpheus-generated
import * as t from 'io-ts'

export type ReservationProfile =
  | 'Leisure'
  | 'Business'
  | 'TourOperator'

export const ReservationProfile = t.keyof({
  Leisure: true,
  Business: true,
  TourOperator: true
}, 'ReservationProfile')

export type SortOrder =
  | 'Ascending'
  | 'Descending'

export const SortOrder = t.keyof({
  Ascending: true,
  Descending: true
}, 'SortOrder')

export type Vendor =
  | 'Hertz'
  | 'Dollar'
  | 'FireFly'
  | 'Thrifty'

export const Vendor = t.keyof({
  Hertz: true,
  Dollar: true,
  FireFly: true,
  Thrifty: true
}, 'Vendor')

export type Tag = Readonly<{
  id: UUID,
  label: string
}>

export const Tag = t.readonly(t.interface({
  id: UUID,
  label: t.string
}, 'Tag'))

export type AgencySearchResult = Readonly<{
  agencies: ReadonlyArray<Tag>,
  networks: ReadonlyArray<Tag>
}>

export const AgencySearchResult = t.readonly(t.interface({
  agencies: t.readonlyArray(Tag),
  networks: t.readonlyArray(Tag)
}, 'AgencySearchResult'))

export type NationSearchResult = Readonly<{
  regions: ReadonlyArray<Tag>,
  countries: ReadonlyArray<Tag>,
  states: ReadonlyArray<Tag>
}>

export const NationSearchResult = t.readonly(t.interface({
  regions: t.readonlyArray(Tag),
  countries: t.readonlyArray(Tag),
  states: t.readonlyArray(Tag)
}, 'NationSearchResult'))

export type CancellationPolicy =
  | 'Free'

export const CancellationPolicy = t.keyof({
  Free: true
}, 'CancellationPolicy')

export type PaymentMode =
  | 'Cash'
  | 'Prepaid'

export const PaymentMode = t.keyof({
  Cash: true,
  Prepaid: true
}, 'PaymentMode')

export type FareRule = Readonly<{
  pickUpValidFrom:
    | LocalDate
    | null,
  pickUpValidUntil:
    | LocalDate
    | null,
  reservationValidFrom:
    | LocalDate
    | null,
  reservationValidUntil:
    | LocalDate
    | null,
  nations: ReadonlyArray<Tag>,
  agencies: ReadonlyArray<Tag>
}>

export const FareRule = t.readonly(t.interface({
  pickUpValidFrom: t.union([
    LocalDate,
    t.null
  ]),
  pickUpValidUntil: t.union([
    LocalDate,
    t.null
  ]),
  reservationValidFrom: t.union([
    LocalDate,
    t.null
  ]),
  reservationValidUntil: t.union([
    LocalDate,
    t.null
  ]),
  nations: t.readonlyArray(Tag),
  agencies: t.readonlyArray(Tag)
}, 'FareRule'))

export type Fare = Readonly<{
  id: UUID,
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: string,
  cdp:
    | string
    | null,
  tourOperatorCode:
    | string
    | null,
  additionalInclusions:
    | string
    | null,
  cancellationPolicy: CancellationPolicy,
  description: string,
  disabled: boolean,
  rules: ReadonlyArray<FareRule>
}>

export const Fare = t.readonly(t.interface({
  id: UUID,
  name: t.string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: t.string,
  cdp: t.union([
    t.string,
    t.null
  ]),
  tourOperatorCode: t.union([
    t.string,
    t.null
  ]),
  additionalInclusions: t.union([
    t.string,
    t.null
  ]),
  cancellationPolicy: CancellationPolicy,
  description: t.string,
  disabled: t.boolean,
  rules: t.readonlyArray(FareRule)
}, 'Fare'))

export type NewFare = Readonly<{
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: string,
  cdp:
    | string
    | null,
  additionalInclusions:
    | string
    | null,
  tourOperatorCode:
    | string
    | null,
  cancellationPolicy: CancellationPolicy,
  description: string,
  disabled: boolean,
  rules: ReadonlyArray<FareRule>
}>

export const NewFare = t.readonly(t.interface({
  name: t.string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: t.string,
  cdp: t.union([
    t.string,
    t.null
  ]),
  additionalInclusions: t.union([
    t.string,
    t.null
  ]),
  tourOperatorCode: t.union([
    t.string,
    t.null
  ]),
  cancellationPolicy: CancellationPolicy,
  description: t.string,
  disabled: t.boolean,
  rules: t.readonlyArray(FareRule)
}, 'NewFare'))

export type FareSummary = Readonly<{
  id: UUID,
  reservationProfile: ReservationProfile,
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  disabled: boolean
}>

export const FareSummary = t.readonly(t.interface({
  id: UUID,
  reservationProfile: ReservationProfile,
  name: t.string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  disabled: t.boolean
}, 'FareSummary'))

export type FareSummarySorting =
  | 'Name'
  | 'Vendor'
  | 'PaymentMode'
  | 'Disabled'

export const FareSummarySorting = t.keyof({
  Name: true,
  Vendor: true,
  PaymentMode: true,
  Disabled: true
}, 'FareSummarySorting')
