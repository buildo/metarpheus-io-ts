// DO NOT EDIT MANUALLY - metarpheus-generated
import * as t from 'io-ts'

export type Tag = Readonly<{
  id: UUID,
  label: string
}>

export const Tag = t.readonly(t.interface({
  id: UUID,
  label: t.string
}, 'Tag'))

export type AgencySearchResult = Readonly<{
  agencies: ReadonlyArray<Tag>,
  networks: ReadonlyArray<Tag>
}>

export const AgencySearchResult = t.readonly(t.interface({
  agencies: t.readonlyArray(Tag),
  networks: t.readonlyArray(Tag)
}, 'AgencySearchResult'))

export type CancellationPolicy =
  | 'Free'

export const CancellationPolicy = t.keyof({
  Free: true
}, 'CancellationPolicy')

export type Vendor =
  | 'Hertz'
  | 'Dollar'
  | 'FireFly'
  | 'Thrifty'

export const Vendor = t.keyof({
  Hertz: true,
  Dollar: true,
  FireFly: true,
  Thrifty: true
}, 'Vendor')

export type PaymentMode =
  | 'Cash'
  | 'Prepaid'

export const PaymentMode = t.keyof({
  Cash: true,
  Prepaid: true
}, 'PaymentMode')

export type FareRule = Readonly<{
  pickUpValidFrom?: LocalDate,
  pickUpValidUntil?: LocalDate,
  reservationValidFrom?: LocalDate,
  reservationValidUntil?: LocalDate,
  nations: ReadonlyArray<Tag>,
  agencies: ReadonlyArray<Tag>
}>

export const FareRule = t.readonly(t.intersection([
  t.interface({
    nations: t.readonlyArray(Tag),
    agencies: t.readonlyArray(Tag)
  }),
  t.partial({
    pickUpValidFrom: LocalDate,
    pickUpValidUntil: LocalDate,
    reservationValidFrom: LocalDate,
    reservationValidUntil: LocalDate
  })
]))

export type Fare = Readonly<{
  id: UUID,
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: string,
  cdp?: string,
  tourOperatorCode?: string,
  additionalInclusions?: string,
  cancellationPolicy: CancellationPolicy,
  description: string,
  disabled: boolean,
  rules: ReadonlyArray<FareRule>
}>

export const Fare = t.readonly(t.intersection([
  t.interface({
    id: UUID,
    name: t.string,
    vendor: Vendor,
    paymentMode: PaymentMode,
    rateCode: t.string,
    cancellationPolicy: CancellationPolicy,
    description: t.string,
    disabled: t.boolean,
    rules: t.readonlyArray(FareRule)
  }),
  t.partial({
    cdp: t.string,
    tourOperatorCode: t.string,
    additionalInclusions: t.string
  })
]))

export type ReservationProfile =
  | 'Leisure'
  | 'Business'
  | 'TourOperator'

export const ReservationProfile = t.keyof({
  Leisure: true,
  Business: true,
  TourOperator: true
}, 'ReservationProfile')

export type FareSummary = Readonly<{
  id: UUID,
  reservationProfile: ReservationProfile,
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  disabled: boolean
}>

export const FareSummary = t.readonly(t.interface({
  id: UUID,
  reservationProfile: ReservationProfile,
  name: t.string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  disabled: t.boolean
}, 'FareSummary'))

export type FareSummarySorting =
  | 'Name'
  | 'Vendor'
  | 'PaymentMode'
  | 'Disabled'

export const FareSummarySorting = t.keyof({
  Name: true,
  Vendor: true,
  PaymentMode: true,
  Disabled: true
}, 'FareSummarySorting')

export type NationSearchResult = Readonly<{
  regions: ReadonlyArray<Tag>,
  countries: ReadonlyArray<Tag>,
  states: ReadonlyArray<Tag>
}>

export const NationSearchResult = t.readonly(t.interface({
  regions: t.readonlyArray(Tag),
  countries: t.readonlyArray(Tag),
  states: t.readonlyArray(Tag)
}, 'NationSearchResult'))

export type NewFare = Readonly<{
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  rateCode: string,
  cdp?: string,
  additionalInclusions?: string,
  tourOperatorCode?: string,
  cancellationPolicy: CancellationPolicy,
  description: string,
  disabled: boolean,
  rules: ReadonlyArray<FareRule>
}>

export const NewFare = t.readonly(t.intersection([
  t.interface({
    name: t.string,
    vendor: Vendor,
    paymentMode: PaymentMode,
    rateCode: t.string,
    cancellationPolicy: CancellationPolicy,
    description: t.string,
    disabled: t.boolean,
    rules: t.readonlyArray(FareRule)
  }),
  t.partial({
    cdp: t.string,
    additionalInclusions: t.string,
    tourOperatorCode: t.string
  })
]))

export type SortOrder =
  | 'Ascending'
  | 'Descending'

export const SortOrder = t.keyof({
  Ascending: true,
  Descending: true
}, 'SortOrder')
