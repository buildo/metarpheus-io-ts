// DO NOT EDIT MANUALLY - metarpheus-generated
import * as t from 'io-ts'

export type Vendor =
  | 'Hertz'
  | 'Dollar'
  | 'FireFly'
  | 'Thrifty'

export const Vendor = t.keyof({
  Hertz: true,
  Dollar: true,
  FireFly: true,
  Thrifty: true
}, 'Vendor')

export type PaymentMode =
  | 'Cash'
  | 'Prepaid'

export const PaymentMode = t.keyof({
  Cash: true,
  Prepaid: true
}, 'PaymentMode')

export type CancellationPolicy =
  | 'Free'

export const CancellationPolicy = t.keyof({
  Free: true
}, 'CancellationPolicy')

export interface AvailableFare {
  id: UUID,
  name: string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  additionalInclusions:
    | string
    | null,
  explicitExclusions:
    | string
    | null,
  cancellationPolicy: CancellationPolicy,
  description:
    | string
    | null
}

export const AvailableFare = t.interface({
  id: UUID,
  name: t.string,
  vendor: Vendor,
  paymentMode: PaymentMode,
  additionalInclusions: t.union([
    t.string,
    t.null
  ]),
  explicitExclusions: t.union([
    t.string,
    t.null
  ]),
  cancellationPolicy: CancellationPolicy,
  description: t.union([
    t.string,
    t.null
  ])
}, 'AvailableFare')

export interface RentalRateTotal {
  base: Money,
  estimatedIncludingTaxes: Money
}

export const RentalRateTotal = t.interface({
  base: Money,
  estimatedIncludingTaxes: Money
}, 'RentalRateTotal')

export type RentalRateDistanceUnit =
  | 'Km'
  | 'Mile'
  | 'Block'

export const RentalRateDistanceUnit = t.keyof({
  Km: true,
  Mile: true,
  Block: true
}, 'RentalRateDistanceUnit')

export interface RentalRateDistance {
  unlimited: boolean,
  unit: RentalRateDistanceUnit,
  amount:
    | number
    | null,
  additional:
    | Money
    | null
}

export const RentalRateDistance = t.interface({
  unlimited: t.boolean,
  unit: RentalRateDistanceUnit,
  amount: t.union([
    t.number,
    t.null
  ]),
  additional: t.union([
    Money,
    t.null
  ])
}, 'RentalRateDistance')

export type SpecialEquipment =
  | 'InfantChildSeat'
  | 'ChildToddlerSeat'
  | 'BoosterSeat'
  | 'NeverLostGPS'
  | 'SnowTyres'

export const SpecialEquipment = t.keyof({
  InfantChildSeat: true,
  ChildToddlerSeat: true,
  BoosterSeat: true,
  NeverLostGPS: true,
  SnowTyres: true
}, 'SpecialEquipment')

export interface PricedSpecialEquipment {
  id: SpecialEquipment,
  units: number,
  cost: Money,
  taxInclusive: boolean,
  includedInRate: boolean
}

export const PricedSpecialEquipment = t.interface({
  id: SpecialEquipment,
  units: t.number,
  cost: Money,
  taxInclusive: t.boolean,
  includedInRate: t.boolean
}, 'PricedSpecialEquipment')

export interface RentalRate {
  externalId: string,
  total: RentalRateTotal,
  distance: RentalRateDistance,
  superCoverIncluded: boolean,
  dropOff:
    | Money
    | null,
  specialEquipments: Array<PricedSpecialEquipment>
}

export const RentalRate = t.interface({
  externalId: t.string,
  total: RentalRateTotal,
  distance: RentalRateDistance,
  superCoverIncluded: t.boolean,
  dropOff: t.union([
    Money,
    t.null
  ]),
  specialEquipments: t.array(PricedSpecialEquipment)
}, 'RentalRate')

export interface AvailableRentalRate {
  availableVehicleId: UUID,
  rentalRate: RentalRate
}

export const AvailableRentalRate = t.interface({
  availableVehicleId: UUID,
  rentalRate: RentalRate
}, 'AvailableRentalRate')

export interface AvailableSpecialEquipment {
  id: SpecialEquipment,
  estimatedUnitCost: Money,
  atMost: number
}

export const AvailableSpecialEquipment = t.interface({
  id: SpecialEquipment,
  estimatedUnitCost: Money,
  atMost: t.number
}, 'AvailableSpecialEquipment')

export type VehicleTransmission =
  | 'Automatic'
  | 'Manual'

export const VehicleTransmission = t.keyof({
  Automatic: true,
  Manual: true
}, 'VehicleTransmission')

export type VehicleFuel =
  | 'Unspecified'
  | 'Diesel'
  | 'Hybrid'
  | 'Electric'
  | 'LPGCompressedGas'
  | 'Hydrogen'
  | 'MultiFuel'
  | 'Petrol'
  | 'Ethanol'

export const VehicleFuel = t.keyof({
  Unspecified: true,
  Diesel: true,
  Hybrid: true,
  Electric: true,
  LPGCompressedGas: true,
  Hydrogen: true,
  MultiFuel: true,
  Petrol: true,
  Ethanol: true
}, 'VehicleFuel')

export type VehicleDrive =
  | 'AllWheel'
  | 'FourWheel'
  | 'Unspecified'

export const VehicleDrive = t.keyof({
  AllWheel: true,
  FourWheel: true,
  Unspecified: true
}, 'VehicleDrive')

export type VehicleCategory =
  | 'Car'
  | 'Van'
  | 'Suv'
  | 'Convertible'
  | 'Limousine'
  | 'Wagon'
  | 'Pickup'
  | 'Motorhome'
  | 'AllTerrain'
  | 'Recreational'
  | 'Sport'
  | 'Special'
  | 'PickupExtendedCab'
  | 'RegularCabPickup'
  | 'SpecialOffer'
  | 'Coupe'
  | 'Monospace'
  | 'TwoWheelVehicle'
  | 'Roadster'
  | 'Crossover'
  | 'CommercialVanOrTruck'

export const VehicleCategory = t.keyof({
  Car: true,
  Van: true,
  Suv: true,
  Convertible: true,
  Limousine: true,
  Wagon: true,
  Pickup: true,
  Motorhome: true,
  AllTerrain: true,
  Recreational: true,
  Sport: true,
  Special: true,
  PickupExtendedCab: true,
  RegularCabPickup: true,
  SpecialOffer: true,
  Coupe: true,
  Monospace: true,
  TwoWheelVehicle: true,
  Roadster: true,
  Crossover: true,
  CommercialVanOrTruck: true
}, 'VehicleCategory')

export type VehicleSize =
  | 'Mini'
  | 'Subcompact'
  | 'Economy'
  | 'Compact'
  | 'Midsize'
  | 'Intermediate'
  | 'Standard'
  | 'Fullsize'
  | 'Luxury'
  | 'Premium'
  | 'Special'
  | 'MiniElite'
  | 'EconomyElite'
  | 'CompactElite'
  | 'IntermediateElite'
  | 'StandardElite'
  | 'FullsizeElite'
  | 'PremiumElite'
  | 'LuxuryElite'
  | 'Oversize'

export const VehicleSize = t.keyof({
  Mini: true,
  Subcompact: true,
  Economy: true,
  Compact: true,
  Midsize: true,
  Intermediate: true,
  Standard: true,
  Fullsize: true,
  Luxury: true,
  Premium: true,
  Special: true,
  MiniElite: true,
  EconomyElite: true,
  CompactElite: true,
  IntermediateElite: true,
  StandardElite: true,
  FullsizeElite: true,
  PremiumElite: true,
  LuxuryElite: true,
  Oversize: true
}, 'VehicleSize')

export interface Vehicle {
  code:
    | string
    | null,
  codeContext:
    | string
    | null,
  airConditioning: boolean,
  seats:
    | number
    | null,
  baggage:
    | number
    | null,
  transmission:
    | VehicleTransmission
    | null,
  fuel:
    | VehicleFuel
    | null,
  drive:
    | VehicleDrive
    | null,
  doors:
    | number
    | null,
  category: VehicleCategory,
  size: VehicleSize,
  model: string,
  modelCode: string,
  pictureId: string,
  segment:
    | string
    | null
}

export const Vehicle = t.interface({
  code: t.union([
    t.string,
    t.null
  ]),
  codeContext: t.union([
    t.string,
    t.null
  ]),
  airConditioning: t.boolean,
  seats: t.union([
    t.number,
    t.null
  ]),
  baggage: t.union([
    t.number,
    t.null
  ]),
  transmission: t.union([
    VehicleTransmission,
    t.null
  ]),
  fuel: t.union([
    VehicleFuel,
    t.null
  ]),
  drive: t.union([
    VehicleDrive,
    t.null
  ]),
  doors: t.union([
    t.number,
    t.null
  ]),
  category: VehicleCategory,
  size: VehicleSize,
  model: t.string,
  modelCode: t.string,
  pictureId: t.string,
  segment: t.union([
    t.string,
    t.null
  ])
}, 'Vehicle')

export interface AvailableVehicle {
  id: UUID,
  createdAt: string,
  queryId: UUID,
  externalId: string,
  vehicle: Vehicle,
  fare: AvailableFare,
  rentalRate: RentalRate
}

export const AvailableVehicle = t.interface({
  id: UUID,
  createdAt: t.string,
  queryId: UUID,
  externalId: t.string,
  vehicle: Vehicle,
  fare: AvailableFare,
  rentalRate: RentalRate
}, 'AvailableVehicle')

export type ReservationProfile =
  | 'Leisure'
  | 'Business'
  | 'TourOperator'

export const ReservationProfile = t.keyof({
  Leisure: true,
  Business: true,
  TourOperator: true
}, 'ReservationProfile')

export interface AvailableVehicleSearchQuery {
  reservationProfile: ReservationProfile,
  pickUpLocation: string,
  pickUpLocalDate: LocalDate,
  pickUpLocalTime: LocalTime,
  dropOffLocation: string,
  dropOffLocalDate: LocalDate,
  dropOffLocalTime: LocalTime
}

export const AvailableVehicleSearchQuery = t.interface({
  reservationProfile: ReservationProfile,
  pickUpLocation: t.string,
  pickUpLocalDate: LocalDate,
  pickUpLocalTime: LocalTime,
  dropOffLocation: t.string,
  dropOffLocalDate: LocalDate,
  dropOffLocalTime: LocalTime
}, 'AvailableVehicleSearchQuery')

export interface VehicleAvailability {
  vehicle: Vehicle,
  availableRentalRatesByFare: { [key: string]: AvailableRentalRate }
}

export const VehicleAvailability = t.interface({
  vehicle: Vehicle,
  availableRentalRatesByFare: t.dictionary(t.string, AvailableRentalRate)
}, 'VehicleAvailability')

export interface AvailableVehicleSearchResult {
  taxPercent:
    | number
    | null,
  fares: Array<AvailableFare>,
  availability: Array<VehicleAvailability>
}

export const AvailableVehicleSearchResult = t.interface({
  taxPercent: t.union([
    t.number,
    t.null
  ]),
  fares: t.array(AvailableFare),
  availability: t.array(VehicleAvailability)
}, 'AvailableVehicleSearchResult')

export interface Location {
  recordType: string,
  actionCode: string,
  recordNumber: string,
  vendorId: string,
  oagCode: string,
  country: string,
  state: string,
  zipCode: string,
  city: string,
  address1: string,
  address2: string,
  address3: string,
  phone: string,
  altPhone: string,
  fax: string,
  telex: string,
  webUrl: string,
  email: string,
  open1mon: string,
  close1mon: string,
  open2mon: string,
  close2mon: string,
  open3mon: string,
  close3mon: string,
  open1tue: string,
  close1tue: string,
  open2tue: string,
  close2tue: string,
  open3tue: string,
  close3tue: string,
  open1wed: string,
  close1wed: string,
  open2wed: string,
  close2wed: string,
  open3wed: string,
  close3wed: string,
  open1thu: string,
  close1thu: string,
  open2thu: string,
  close2thu: string,
  open3thu: string,
  close3thu: string,
  open1fri: string,
  close1fri: string,
  open2fri: string,
  close2fri: string,
  open3fri: string,
  close3fri: string,
  open1sat: string,
  close1sat: string,
  open2sat: string,
  close2sat: string,
  open3sat: string,
  close3sat: string,
  open1sun: string,
  close1sun: string,
  open2sun: string,
  close2sun: string,
  open3sun: string,
  close3sun: string,
  latitude: string,
  longitude: string,
  description: string,
  locType1: string,
  locType2: string,
  truckOrVan: string,
  csi: string,
  csiDailyRate: string,
  csiWeeklyRate: string,
  cst: string,
  cstDailyRate: string,
  cstWeeklyRate: string,
  bst: string,
  bstDailyRate: string,
  bstWeeklyRate: string,
  nev: string,
  nevDailyRate: string,
  nevWeeklyRate: string,
  skv: string,
  skvDailyRate: string,
  skvWeeklyRate: string,
  sno: string,
  snoDailyRate: string,
  snoWeeklyRate: string,
  sbr: string,
  sbrDailyRate: string,
  sbrWeeklyRate: string,
  src: string,
  srcDailyRate: string,
  srcWeeklyRate: string,
  hmm: string,
  hmmDailyRate: string,
  hmmWeeklyRate: string,
  ldw: string,
  ldwDailyRate: string,
  ldwWeeklyRate: string,
  swd: string,
  swdDailyRate: string,
  swdWeeklyRate: string,
  lis: string,
  lisDailyRate: string,
  lisWeeklyRate: string,
  ppi: string,
  ppiDailyRate: string,
  ppiWeeklyRate: string,
  tp: string,
  tpDailyRate: string,
  tpWeeklyRate: string,
  pkg: string,
  pkgDailyRate: string,
  pkgWeeklyRate: string
}

export const Location = t.interface({
  recordType: t.string,
  actionCode: t.string,
  recordNumber: t.string,
  vendorId: t.string,
  oagCode: t.string,
  country: t.string,
  state: t.string,
  zipCode: t.string,
  city: t.string,
  address1: t.string,
  address2: t.string,
  address3: t.string,
  phone: t.string,
  altPhone: t.string,
  fax: t.string,
  telex: t.string,
  webUrl: t.string,
  email: t.string,
  open1mon: t.string,
  close1mon: t.string,
  open2mon: t.string,
  close2mon: t.string,
  open3mon: t.string,
  close3mon: t.string,
  open1tue: t.string,
  close1tue: t.string,
  open2tue: t.string,
  close2tue: t.string,
  open3tue: t.string,
  close3tue: t.string,
  open1wed: t.string,
  close1wed: t.string,
  open2wed: t.string,
  close2wed: t.string,
  open3wed: t.string,
  close3wed: t.string,
  open1thu: t.string,
  close1thu: t.string,
  open2thu: t.string,
  close2thu: t.string,
  open3thu: t.string,
  close3thu: t.string,
  open1fri: t.string,
  close1fri: t.string,
  open2fri: t.string,
  close2fri: t.string,
  open3fri: t.string,
  close3fri: t.string,
  open1sat: t.string,
  close1sat: t.string,
  open2sat: t.string,
  close2sat: t.string,
  open3sat: t.string,
  close3sat: t.string,
  open1sun: t.string,
  close1sun: t.string,
  open2sun: t.string,
  close2sun: t.string,
  open3sun: t.string,
  close3sun: t.string,
  latitude: t.string,
  longitude: t.string,
  description: t.string,
  locType1: t.string,
  locType2: t.string,
  truckOrVan: t.string,
  csi: t.string,
  csiDailyRate: t.string,
  csiWeeklyRate: t.string,
  cst: t.string,
  cstDailyRate: t.string,
  cstWeeklyRate: t.string,
  bst: t.string,
  bstDailyRate: t.string,
  bstWeeklyRate: t.string,
  nev: t.string,
  nevDailyRate: t.string,
  nevWeeklyRate: t.string,
  skv: t.string,
  skvDailyRate: t.string,
  skvWeeklyRate: t.string,
  sno: t.string,
  snoDailyRate: t.string,
  snoWeeklyRate: t.string,
  sbr: t.string,
  sbrDailyRate: t.string,
  sbrWeeklyRate: t.string,
  src: t.string,
  srcDailyRate: t.string,
  srcWeeklyRate: t.string,
  hmm: t.string,
  hmmDailyRate: t.string,
  hmmWeeklyRate: t.string,
  ldw: t.string,
  ldwDailyRate: t.string,
  ldwWeeklyRate: t.string,
  swd: t.string,
  swdDailyRate: t.string,
  swdWeeklyRate: t.string,
  lis: t.string,
  lisDailyRate: t.string,
  lisWeeklyRate: t.string,
  ppi: t.string,
  ppiDailyRate: t.string,
  ppiWeeklyRate: t.string,
  tp: t.string,
  tpDailyRate: t.string,
  tpWeeklyRate: t.string,
  pkg: t.string,
  pkgDailyRate: t.string,
  pkgWeeklyRate: t.string
}, 'Location')

export interface LocationSearchResult {
  airports:
    | Array<Location>
    | null,
  stations:
    | Array<Location>
    | null,
  cities:
    | Array<Location>
    | null,
  hotels:
    | Array<Location>
    | null
}

export const LocationSearchResult = t.interface({
  airports: t.union([
    t.array(Location),
    t.null
  ]),
  stations: t.union([
    t.array(Location),
    t.null
  ]),
  cities: t.union([
    t.array(Location),
    t.null
  ]),
  hotels: t.union([
    t.array(Location),
    t.null
  ])
}, 'LocationSearchResult')

export interface SelectedSpecialEquipment {
  id: SpecialEquipment,
  units: number
}

export const SelectedSpecialEquipment = t.interface({
  id: SpecialEquipment,
  units: t.number
}, 'SelectedSpecialEquipment')
