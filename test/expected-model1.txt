// DO NOT EDIT MANUALLY - metarpheus-generated
import * as t from 'io-ts'

export interface Health {
  /** Name of the service. */
  id: string,
  /** Version of the service. */
  version: string,
  /** Current UTC date and time of the request, in ISO 8601 format. */
  currentAsOfUtc: Date
}

export const Health = t.interface({
  /** Name of the service. */
  id: t.string,
  /** Version of the service. */
  version: t.string,
  /** Current UTC date and time of the request, in ISO 8601 format. */
  currentAsOfUtc: Date
}, 'Health')

export type ICQAlertCategory =
  | 'Critical'
  | 'Alert'
  | 'Notification'

export const ICQAlertCategory = t.keyof({
  Critical: true,
  Alert: true,
  Notification: true
}, 'ICQAlertCategory')

export interface ICQAlert {
  _moduleId: number,
  moduleName: string,
  _workcellSerialNumber: string,
  workcellName: string,
  AIMCode: number,
  AIMSubCode:
    | number
    | null,
  alertDateTime: Date,
  category: ICQAlertCategory,
  description: string
}

export const ICQAlert = t.interface({
  _moduleId: t.number,
  moduleName: t.string,
  _workcellSerialNumber: t.string,
  workcellName: t.string,
  AIMCode: t.number,
  AIMSubCode: t.union([
    t.number,
    t.null
  ]),
  alertDateTime: Date,
  category: ICQAlertCategory,
  description: t.string
}, 'ICQAlert')

export interface ICQAssayReference {
  _number: number,
  _version: number
}

export const ICQAssayReference = t.interface({
  _number: t.number,
  _version: t.number
}, 'ICQAssayReference')

export type ICQCalibrationMethod =
  | 'Qual1Point'
  | 'Qual2Point'
  | 'CalValueReference'
  | 'ICT'
  | 'Exponential'
  | 'Linear'
  | 'Spline'
  | 'ABS'
  | 'Factor'
  | 'UseFactor'
  | 'UseFactorBlank'
  | 'PLC4Y'
  | 'PLC4X'
  | 'PLC4XTransform'
  | 'PLC5Y'
  | 'PLC5X'
  | 'PLC5XTransform'
  | 'PointToPoint'
  | 'IAReference'
  | 'Logit-4'
  | 'Logit-5'

export const ICQCalibrationMethod = t.keyof({
  Qual1Point: true,
  Qual2Point: true,
  CalValueReference: true,
  ICT: true,
  Exponential: true,
  Linear: true,
  Spline: true,
  ABS: true,
  Factor: true,
  UseFactor: true,
  UseFactorBlank: true,
  PLC4Y: true,
  PLC4X: true,
  PLC4XTransform: true,
  PLC5Y: true,
  PLC5X: true,
  PLC5XTransform: true,
  PointToPoint: true,
  IAReference: true,
  'Logit-4': true,
  'Logit-5': true
}, 'ICQCalibrationMethod')

export type ICQCalibrationType =
  | 'Full'
  | 'Adjust'

export const ICQCalibrationType = t.keyof({
  Full: true,
  Adjust: true
}, 'ICQCalibrationType')

export type ICQCalibrationStatus =
  | 'NoCal'
  | 'Ok'
  | 'Failed'
  | 'Expired'
  | 'Overridden'
  | 'OverriddenLot'
  | 'PendingQC'
  | 'InProcess'

export const ICQCalibrationStatus = t.keyof({
  NoCal: true,
  Ok: true,
  Failed: true,
  Expired: true,
  Overridden: true,
  OverriddenLot: true,
  PendingQC: true,
  InProcess: true
}, 'ICQCalibrationStatus')

export interface ICQCalibration {
  _moduleId: number,
  moduleName: string,
  _workcellSerialNumber: string,
  workcellName: string,
  assayReference: ICQAssayReference,
  assayName: string,
  reagentLotNumber: string,
  calibratorLotNumber: string,
  method: ICQCalibrationMethod,
  type: ICQCalibrationType,
  calibrationDateTime:
    | Date
    | null,
  expirationDateTime:
    | Date
    | null,
  status: ICQCalibrationStatus,
  user:
    | string
    | null
}

export const ICQCalibration = t.interface({
  _moduleId: t.number,
  moduleName: t.string,
  _workcellSerialNumber: t.string,
  workcellName: t.string,
  assayReference: ICQAssayReference,
  assayName: t.string,
  reagentLotNumber: t.string,
  calibratorLotNumber: t.string,
  method: ICQCalibrationMethod,
  type: ICQCalibrationType,
  calibrationDateTime: t.union([
    Date,
    t.null
  ]),
  expirationDateTime: t.union([
    Date,
    t.null
  ]),
  status: ICQCalibrationStatus,
  user: t.union([
    t.string,
    t.null
  ])
}, 'ICQCalibration')

export type ICQReagentStatus =
  | 'Ok'
  | 'Mixing'
  | 'Overridden'
  | 'Disabled'
  | 'LowAlert'
  | 'Expired'
  | 'ExpiredError'
  | 'Empty'
  | 'NoAssay'
  | 'PickError'
  | 'PlaceError'
  | 'LoadError'
  | 'Incomplete'
  | 'BCFail'
  | 'Undefined'

export const ICQReagentStatus = t.keyof({
  Ok: true,
  Mixing: true,
  Overridden: true,
  Disabled: true,
  LowAlert: true,
  Expired: true,
  ExpiredError: true,
  Empty: true,
  NoAssay: true,
  PickError: true,
  PlaceError: true,
  LoadError: true,
  Incomplete: true,
  BCFail: true,
  Undefined: true
}, 'ICQReagentStatus')

export type ICQReagentCartridgeStatus =
  | 'Ok'
  | 'UnloadError'
  | 'LoadError'
  | 'ScheduledUnload'
  | 'ScheduledLoad'
  | 'PartiallyUnloaded'
  | 'Scanning'
  | 'Unloading'
  | 'Loading'

export const ICQReagentCartridgeStatus = t.keyof({
  Ok: true,
  UnloadError: true,
  LoadError: true,
  ScheduledUnload: true,
  ScheduledLoad: true,
  PartiallyUnloaded: true,
  Scanning: true,
  Unloading: true,
  Loading: true
}, 'ICQReagentCartridgeStatus')

export interface ICQOnBoardSolution {
  _moduleId: number,
  moduleName: string,
  _workcellSerialNumber: string,
  workcellName: string,
  _lotNumber: string,
  _serialNumber: string,
  configurationId: string,
  configurationVersion: number,
  expirationDate: Date,
  carouselPosition:
    | number
    | null,
  RSMPosition:
    | number
    | null,
  percentOfRemainingVolume: number,
  remainingHoursOfOnBoardStability:
    | number
    | null,
  status: ICQReagentStatus,
  cartridgeStatus: ICQReagentCartridgeStatus
}

export const ICQOnBoardSolution = t.interface({
  _moduleId: t.number,
  moduleName: t.string,
  _workcellSerialNumber: t.string,
  workcellName: t.string,
  _lotNumber: t.string,
  _serialNumber: t.string,
  configurationId: t.string,
  configurationVersion: t.number,
  expirationDate: Date,
  carouselPosition: t.union([
    t.number,
    t.null
  ]),
  RSMPosition: t.union([
    t.number,
    t.null
  ]),
  percentOfRemainingVolume: t.number,
  remainingHoursOfOnBoardStability: t.union([
    t.number,
    t.null
  ]),
  status: ICQReagentStatus,
  cartridgeStatus: ICQReagentCartridgeStatus
}, 'ICQOnBoardSolution')

export type ICQModuleType =
  | 'IA'
  | 'CC'

export const ICQModuleType = t.keyof({
  IA: true,
  CC: true
}, 'ICQModuleType')

export type ICQOverallStatus =
  | 'Ok'
  | 'Warning'
  | 'Error'

export const ICQOverallStatus = t.keyof({
  Ok: true,
  Warning: true,
  Error: true
}, 'ICQOverallStatus')

export type ICQModuleStatus =
  | 'Offline'
  | 'Stopped'
  | 'Initializing'
  | 'Warming'
  | 'Idle'
  | 'Running'
  | 'Processing'
  | 'Pausing'
  | 'Maintenance'

export const ICQModuleStatus = t.keyof({
  Offline: true,
  Stopped: true,
  Initializing: true,
  Warming: true,
  Idle: true,
  Running: true,
  Processing: true,
  Pausing: true,
  Maintenance: true
}, 'ICQModuleStatus')

export interface ICQProcessingModule {
  _id: number,
  serialNumber: string,
  type: ICQModuleType,
  name: string,
  overallStatus: ICQOverallStatus,
  status: ICQModuleStatus,
  numberOfTestsInProgress: number,
  reagentOverallStatus: ICQOverallStatus,
  supplyOverallStatus: ICQOverallStatus,
  calibrationOverallStatus: ICQOverallStatus,
  QCAnalysisOverallStatus: ICQOverallStatus,
  maintenanceOverallStatus: ICQOverallStatus
}

export const ICQProcessingModule = t.interface({
  _id: t.number,
  serialNumber: t.string,
  type: ICQModuleType,
  name: t.string,
  overallStatus: ICQOverallStatus,
  status: ICQModuleStatus,
  numberOfTestsInProgress: t.number,
  reagentOverallStatus: ICQOverallStatus,
  supplyOverallStatus: ICQOverallStatus,
  calibrationOverallStatus: ICQOverallStatus,
  QCAnalysisOverallStatus: ICQOverallStatus,
  maintenanceOverallStatus: ICQOverallStatus
}, 'ICQProcessingModule')

export type ICQQCAnalysisStatus =
  | 'Success'
  | 'QCOutOfRange'
  | 'WestgardWarning'
  | 'WestgardFailure'

export const ICQQCAnalysisStatus = t.keyof({
  Success: true,
  QCOutOfRange: true,
  WestgardWarning: true,
  WestgardFailure: true
}, 'ICQQCAnalysisStatus')

export interface ICQQCAnalysis {
  _moduleId: number,
  moduleName: string,
  _workcellSerialNumber: string,
  workcellName: string,
  assayReference: ICQAssayReference,
  assayName: string,
  controlSetName: string,
  controlLevelName: string,
  controlLotNumber: string,
  assayQCStatus: ICQQCAnalysisStatus
}

export const ICQQCAnalysis = t.interface({
  _moduleId: t.number,
  moduleName: t.string,
  _workcellSerialNumber: t.string,
  workcellName: t.string,
  assayReference: ICQAssayReference,
  assayName: t.string,
  controlSetName: t.string,
  controlLevelName: t.string,
  controlLotNumber: t.string,
  assayQCStatus: ICQQCAnalysisStatus
}, 'ICQQCAnalysis')

export type ICQQCMaterialStatus =
  | 'Ok'
  | 'LowAlert'
  | 'Empty'
  | 'Expired'
  | 'Overridden'

export const ICQQCMaterialStatus = t.keyof({
  Ok: true,
  LowAlert: true,
  Empty: true,
  Expired: true,
  Overridden: true
}, 'ICQQCMaterialStatus')

export interface ICQQCMaterial {
  _moduleId: number,
  moduleName: string,
  _workcellSerialNumber: string,
  workcellName: string,
  assayReferences: Array<ICQAssayReference>,
  assayNames: Array<string>,
  _setName: string,
  _levelName: string,
  _lotNumber: string,
  _serialNumber: string,
  carouselPosition:
    | number
    | null,
  RSMPosition:
    | number
    | null,
  rackId: string,
  rackPosition: number,
  percentVolumeRemaining: number,
  materialExpirationDate: Date,
  remainingHoursOfOnBoardStability: number,
  remainingMinutesOfInUseStability:
    | number
    | null,
  status: ICQQCMaterialStatus
}

export const ICQQCMaterial = t.interface({
  _moduleId: t.number,
  moduleName: t.string,
  _workcellSerialNumber: t.string,
  workcellName: t.string,
  assayReferences: t.array(ICQAssayReference),
  assayNames: t.array(t.string),
  _setName: t.string,
  _levelName: t.string,
  _lotNumber: t.string,
  _serialNumber: t.string,
  carouselPosition: t.union([
    t.number,
    t.null
  ]),
  RSMPosition: t.union([
    t.number,
    t.null
  ]),
  rackId: t.string,
  rackPosition: t.number,
  percentVolumeRemaining: t.number,
  materialExpirationDate: Date,
  remainingHoursOfOnBoardStability: t.number,
  remainingMinutesOfInUseStability: t.union([
    t.number,
    t.null
  ]),
  status: ICQQCMaterialStatus
}, 'ICQQCMaterial')

export type ICQRSMStatus =
  | 'Offline'
  | 'Stopped'
  | 'Initializing'
  | 'Idle'
  | 'Running'
  | 'Pausing'
  | 'Maintenance'

export const ICQRSMStatus = t.keyof({
  Offline: true,
  Stopped: true,
  Initializing: true,
  Idle: true,
  Running: true,
  Pausing: true,
  Maintenance: true
}, 'ICQRSMStatus')

export interface ICQRSM {
  serialNumber: string,
  name: string,
  overallStatus: ICQOverallStatus,
  status: ICQRSMStatus
}

export const ICQRSM = t.interface({
  serialNumber: t.string,
  name: t.string,
  overallStatus: ICQOverallStatus,
  status: ICQRSMStatus
}, 'ICQRSM')

export type ICQConnectionStatus =
  | 'Connected'
  | 'NotConnected'
  | 'NotConfigured'

export const ICQConnectionStatus = t.keyof({
  Connected: true,
  NotConnected: true,
  NotConfigured: true
}, 'ICQConnectionStatus')

export type ICQPrinterStatus =
  | 'NoError'
  | 'Warning'
  | 'Error'
  | 'NotConfigured'

export const ICQPrinterStatus = t.keyof({
  NoError: true,
  Warning: true,
  Error: true,
  NotConfigured: true
}, 'ICQPrinterStatus')

export interface ICQWorkcell {
  _serialNumber: string,
  name: string,
  numberOfSamples: number,
  numberOfResultsPending: number,
  numberOfExceptions: number,
  LISConnectionStatus: ICQConnectionStatus,
  LASConnectionStatus: ICQConnectionStatus,
  AbbottLinkConnectionStatus: ICQConnectionStatus,
  PrinterConnectionStatus: ICQPrinterStatus,
  currentUser: string,
  processingModules: Array<ICQProcessingModule>,
  RSM: ICQRSM
}

export const ICQWorkcell = t.interface({
  _serialNumber: t.string,
  name: t.string,
  numberOfSamples: t.number,
  numberOfResultsPending: t.number,
  numberOfExceptions: t.number,
  LISConnectionStatus: ICQConnectionStatus,
  LASConnectionStatus: ICQConnectionStatus,
  AbbottLinkConnectionStatus: ICQConnectionStatus,
  PrinterConnectionStatus: ICQPrinterStatus,
  currentUser: t.string,
  processingModules: t.array(ICQProcessingModule),
  RSM: ICQRSM
}, 'ICQWorkcell')

export type CampingLocation =
  | 'Seaside'
  | 'Mountains'

export const CampingLocation = t.keyof({
  Seaside: true,
  Mountains: true
}, 'CampingLocation')

export interface Camping {
  /** camping name */
  name: string,
  /** number of tents */
  size: number,
  /** camping location */
  location: CampingLocation
}

export const Camping = t.interface({
  /** camping name */
  name: t.string,
  /** number of tents */
  size: t.number,
  /** camping location */
  location: CampingLocation
}, 'Camping')
